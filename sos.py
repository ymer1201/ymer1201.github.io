import telebot
import subprocess
import os
import signal
import logging
import schedule
import time
from datetime import datetime
from telebot import types
import threading
import platform
import atexit

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = "7840921830:AAGIRbqhuuAr8qyfX_br-0stFxAAdCGF6R8"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
active_processes = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "üöÄ –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–æ–¥ –∏–ª–∏ —Ñ–∞–π–ª, –∏ —è –≤—ã–ø–æ–ª–Ω—é –µ–≥–æ.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞
def run_code(user_id, code):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        if platform.system() == 'Windows':
            process = subprocess.Popen(
                ['python', '-c', code],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 'python' –≤–º–µ—Å—Ç–æ 'python3' –Ω–∞ Windows
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
            )
        else:
            process = subprocess.Popen(
                ['python3', '-c', code],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                preexec_fn=os.setsid  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ Unix-–ø–æ–¥–æ–±–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö
            )

        active_processes[user_id] = process
        stdout, stderr = process.communicate()
        output = stdout.strip() or "‚úÖ –ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω –±–µ–∑ –≤—ã–≤–æ–¥–∞."
        error = stderr.strip() or "‚úÖ –û—à–∏–±–æ–∫ –Ω–µ—Ç."

        bot.send_message(user_id, f"üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n{output}\nüö® –û—à–∏–±–∫–∏:\n{error}")
    except Exception as e:
        bot.send_message(user_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–¥–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–¥–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
@bot.message_handler(func=lambda message: True)
def handle_code(message):
    user_id = message.chat.id
    code = message.text

    bot.send_message(user_id, "‚è≥ –í—ã–ø–æ–ª–Ω—è—é –∫–æ–¥...")
    run_code(user_id, code)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–æ–≤
@bot.message_handler(content_types=['document'])
def handle_file(message):
    user_id = message.chat.id
    file_info = bot.get_file(message.document.file_id)
    downloaded_file = bot.download_file(file_info.file_path)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤—Ä–µ–º–µ–Ω–Ω–æ
    file_name = message.document.file_name
    with open(file_name, 'wb') as new_file:
        new_file.write(downloaded_file)

    # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
    with open(file_name, 'r') as file:
        code = file.read()

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    os.remove(file_name)

    bot.send_message(user_id, "‚è≥ –í—ã–ø–æ–ª–Ω—è—é –∫–æ–¥ –∏–∑ —Ñ–∞–π–ª–∞...")
    run_code(user_id, code)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É
@bot.callback_query_handler(func=lambda call: call.data.startswith("stop_"))
def stop_code(call):
    user_id = int(call.data.split("_")[1])

    if user_id in active_processes:
        process = active_processes[user_id]
        os.killpg(process.pid, signal.SIGTERM)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
        del active_processes[user_id]
        bot.answer_callback_query(call.id, "‚èπÔ∏è –ö–æ–¥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        bot.send_message(user_id, "‚ùå –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
    else:
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
@bot.message_handler(commands=['stop'])
def stop_code_global(message):
    user_id = message.chat.id
    if user_id in active_processes:
        process = active_processes[user_id]
        os.killpg(process.pid, signal.SIGTERM)
        del active_processes[user_id]
        bot.send_message(user_id, "‚ùå –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –±—ã–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    else:
        bot.send_message(user_id, "‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
def cleanup():
    for user_id, process in active_processes.items():
        try:
            os.killpg(process.pid, signal.SIGTERM)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")

atexit.register(cleanup)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def start_bot():
    print("=== –ë–û–¢ –ó–ê–ü–£–©–ï–ù ===")
    bot.infinity_polling()

if __name__ == "__main__":
    bot_thread = threading.Thread(target=start_bot)
    bot_thread.daemon = True  # –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –≤–º–µ—Å—Ç–µ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø–æ—Ç–æ–∫–æ–º
    bot_thread.start()

    while True:
        schedule.run_pending()
        time.sleep(1)